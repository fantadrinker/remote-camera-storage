# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  remote-camera-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  # custom resources
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          Auth0APIAuthorizer:
            JwtConfiguration:
              issuer: "https://dev-55m1hzkqt35ta6tx.us.auth0.com/"
              audience: 
                - "https://ep4plu4ge6.execute-api.us-east-1.amazonaws.com/"
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: Auth0APIAuthorizer
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html   
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "Content-Type"
          - "Authorization"
        AllowOrigins: 
          - "http://localhost:5173"
          - "https://fantadrinker.github.io"

  StreamsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Name: StreamsApi
  
  StreamConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamConnectInteg
  StreamConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  StreamConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  StreamDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamDisconnectInteg
  StreamDisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  StreamDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  
  StreamDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamDefaultInteg
  
  StreamDefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations
  
  StreamDefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com


  StreamViewerSendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: viewersend
      AuthorizationType: NONE
      OperationName: ViewerSendMessage
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamViewerSendInteg
  StreamViewerSendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Viewer Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnViewerSendMessageFunction.Arn}/invocations
  StreamViewerSendPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnViewerSendMessageFunction
      Principal: apigateway.amazonaws.com

  StreamBroadcastSendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: broadcastsend
      AuthorizationType: NONE
      OperationName: BroadcastSendMessage
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamBroadcastSendInteg
  StreamBroadcastSendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Broadcast Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnBroadcastSendMessageFunction.Arn}/invocations
  StreamBroadcastSendPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnBroadcastSendMessageFunction
      Principal: apigateway.amazonaws.com

  StreamBroadcastInitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: broadcastinit
      AuthorizationType: NONE
      OperationName: BroadcastInit
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamBroadcastInitInteg
  StreamBroadcastInitInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Broadcast Init Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnBroadcastInitFunction.Arn}/invocations
  StreamBroadcastInitPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnBroadcastInitFunction 
      Principal: apigateway.amazonaws.com

  StreamViewerInitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StreamsApi
      RouteKey: viewerinit
      AuthorizationType: NONE
      OperationName: ViewerInit
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: StreamViewerInitInteg
  StreamViewerInitInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StreamsApi
      Description: Viewer Init Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnViewerInitFunction.Arn}/invocations
  StreamViewerInitPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - StreamsApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnViewerInitFunction 
      Principal: apigateway.amazonaws.com
  
  # if need to create a new deployment or update existing
  # rename this to get a new one
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - StreamConnectRoute
      - StreamDisconnectRoute
      - StreamDefaultRoute
      - StreamViewerInitRoute
      - StreamBroadcastInitRoute
      - StreamViewerSendRoute
      - StreamBroadcastSendRoute
    Properties:
      ApiId:
        Ref: StreamsApi
      StageName: Test
  
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref StreamsApi

  TestStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Test
      Description: Test Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref StreamsApi


  # this is a lambda function that retrieves s3 upload url
  getAccessUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-s3-upload-url.putObjectUrl
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MyS3Bucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          RECORDINGS_BUCKET: !Ref MyS3Bucket
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /access-url
            Method: GET
            ApiId: !Ref MyApi

  # this is a lambda function that retrieves s3 upload url
  getS3ObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-s3-objects.getStoredVideos
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MyS3Bucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          RECORDINGS_BUCKET: !Ref MyS3Bucket
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /recordings
            Method: GET
            ApiId: !Ref MyApi
  
  getS3DownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-s3-download-url.getObjectUrl
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MyS3Bucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          RECORDINGS_BUCKET: !Ref MyS3Bucket
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /download-url
            Method: GET
            ApiId: !Ref MyApi

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/connect-stream.connectStream
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
  
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/disconnect-stream.disconnectStream
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
  
  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/default-handler.onMessage
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
  
  
  OnBroadcastSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/broadcast-send-message.sendMessage
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StreamsApi}/*'
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable

  OnViewerSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/viewer-send-message.sendMessage
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StreamsApi}/*'
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
        
  OnBroadcastInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/broadcast-init.initBroadcast
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StreamsApi}/*'
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
            
  OnViewerInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/WSHandlers/viewer-init.initViewer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StreamTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StreamsApi}/*'
      Environment:
        Variables:
          STREAM_TABLE: !Ref StreamTable
  StreamTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: pk
        Type: String

  # S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "http://localhost:5173"
              - "https://fantadrinker.github.io"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/access-url"

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref StreamsApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'TestStage'] ]
